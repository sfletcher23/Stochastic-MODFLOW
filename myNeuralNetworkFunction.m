function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 09-May-2017 14:07:00.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx5 matrix, input #1
% and returns:
%   y = Qx2 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.00303974068627535;0.00105005371411575;-49963.5589717891;-49585.9735612026;6.005047364];
x1_step1.gain = [2.00823043251994;224.792913320233;3.77642572091383e-05;3.83056410929303e-05;0.000400698810018606];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.36001528096910495602;10.76333530065738664;-0.32985708160227056318;15.082503846799113489;15.819209011737001447;0.3239589883778777879;10.71234436182050942;9.648138274946287396;21.72934811349299622;-6.5933320160650978892];
IW1_1 = [-0.2990292137494098279 0.012354069426082883026 -0.18911526628781968884 -0.29523581642362928257 1.6597371328304733051;3.0068993272877051481 -1.665653296729931343 -6.1069207118969606185 -3.4817044149702134348 -0.55625565356553097196;-0.28936727882579538207 0.012164599540861477031 -0.21072088000049835066 -0.32276536154264851008 1.6051907659973776443;2.7383545974305638637 -2.3270966861677866433 -11.350603161158366206 -4.6012350220587938665 -0.60597512082885207629;2.909327663890344251 -2.3898253002282312529 -11.650039367094956688 -5.4919347264426994215 -0.6032885471391083998;0.28359114513028588211 0.035843306902031780992 0.6879180169506355913 -0.061344776773855906604 -1.2529662678647586205;5.0013632266790102321 -2.2642055586920397658 1.7540742785421901129 -3.0792618899811610156 -1.0973360043645350448;2.101796352071995333 -1.2232668502586874215 -5.2046091045444775602 -3.524242012611194852 -0.55711985599153812654;8.8318941345088308736 0.81363056221535567936 -12.820581329241928614 0.51164768111441893961 -0.56220243309907236284;-4.1517477278288614784 0.04426510060740050656 -0.11461952545956925753 -0.060663817121543596456 -0.68317168235384140296];

% Layer 2
b2 = [3.2673360593406335362;-0.89561369602459939276];
LW2_1 = [0.3344830335366147378 3.0078997136074678842 -0.34271284458756928748 -3.3692186225766858065 2.9122983807506677145 0.019132590947522950392 -0.002731926277719752983 -4.5197900223596683134 -3.0638168818965829665 -0.78935672286037916745;0.40022936591711094634 3.0123129788268188101 -0.42879467739412874261 -3.3327279659195476746 2.8834480852965476139 -0.0047378722734306554648 -0.57612729146088836885 -4.5774800585834594102 1.7893202288330956051 -0.72013734965258535681];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [4.78151988468168e-05;4.78289452551318e-05];
y1_step1.xoffset = [0;0];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
